<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
	default-lazy-init="true">
	
	<description>Spring公共配置文件 </description>
	
	
	<import resource="spring-dateSource.xml"/>
	
	<!-- 引入的配置文件 -->
	<context:property-placeholder location="classpath*:/config.properties" ignore-unresolvable="true"/>
	<!-- <util:properties id="mybatisProps" location="classpath:/config/mybatis.properties"/>   -->
	
	<!-- 
		1.bean自动注册
		        有一个关于service的疑问：如果sevice被spring-mvc扫描到了，可能会使注解事务失效，所以在spring-mvc中只扫描Controller
		2.引入配置文件，mybatis配置
		3.dao目录指定
		4.配置事务管理器,使用注解方式配置事务特性,定义aspectj
		5.引入配置文件，数据源配置,连接池监控
	 -->
	
	<!-- bean自动注册，使用annotation,检查@Required,@Autowired的属性已被注入 -->
	<context:component-scan base-package="com.sauzny.jmvc">
		<!-- 不扫描controller -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		
		<!-- mybatis configLocation -->
		<property name="configLocation" value="${mybatis.configLocation}" />
		<!-- 显式指定Mapper文件位置 --> 
		<property name="mapperLocations" value="${mybatis.mapperLocations}" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="${mybatis.alias.basepackage}" />
		
		<!-- 
		mybatis configLocation
		<property name="configLocation" value="#{mybatisProps['mybatis.configLocation']}" />
		显式指定Mapper文件位置 
		<property name="mapperLocations" value="#{mybatisProps['mybatis.mapperLocations']}" />
		自动扫描entity目录, 省掉Configuration.xml里的手工配置
		<property name="typeAliasesPackage" value="#{mybatisProps['mybatis.alias.basepackage']}" />
		 -->
		
	</bean>
	
	<!-- DAO目录指定配置-->
	<!-- 	
		在applicationContext.xml中，
		1.MapperScannerConfigurer指明需要扫描的DAO接口的目录，动态创建其实现类。即只有接口的DAO。
		2.如果DAO接口在多个目录中，简单的做法是创建一个MyBatisDAO的annotation，
			所有DAO都用这个annotation标识，然后用annotations属性指定它，那么package配到项目顶层package就可以了
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sauzny.jmvc.dao.mapper" />
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory"/>   -->
		<!-- <property name="annotationClass" value="com.xxx888.assist.view.dao.MyBatisRepository"/> -->
	</bean>
	
	<!-- 事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- 定义aspectj -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	
</beans>