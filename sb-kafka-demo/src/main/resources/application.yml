
# 可配置的项
# org.springframework.boot.autoconfigure.kafka.KafkaProperties

spring.kafka.bootstrap-servers:
  - 172.16.1.235:9092
  - 172.16.1.235:9093

# 默认值查看http://kafka.apache.org/documentation/#consumerconfigs，而且发现consumer还有很多属性
spring.kafka.consumer:
  # ID在发出请求时传递给服务器;用于服务器端日志记录
  # client-id: myConsumer01
  # 心跳（以毫秒为单位），默认值为10000
  # 超时会将此消费者移除，启动重新平衡
  # heartbeat-interval:10000
  group-id: myGroup01
  # 是否自动提交，默认是true
  enable-auto-commit: false
  # 自动提交间隔，毫秒，自动提交为true时才有效
  # auto-commit-interval: 100
  key-deserializer: org.apache.kafka.common.serialization.StringSerializer
  value-deserializer: org.apache.kafka.common.serialization.StringSerializer
  # value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

  # 当没有初始offset 或 如果当前offset在服务器上已经不存在
  # 使用的策略，默认值为latest
  # earliest 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
  # latest 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
  # none topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
  # auto-offset-reset: latest
  # 服务器应以字节为单位返回获取请求的最小数据量，默认值为1，对应的kafka的参数为fetch.min.bytes。
  # fetch-min-size: 100
  # 如果没有足够的数据立即满足“fetch.min.bytes”给出的要求，服务器在回答获取请求之前将阻塞的最长时间（以毫秒为单位），默认值为500
  # spring.kafka.consumer.fetch-max-wait: 500
  # 一次调用poll()操作时返回的最大记录数，放到本地缓存，默认值为500
  # 配合spring.kafka.listener.type=batch使用
  # max-poll-records: 500
spring.kafka.listener:
  #client-id:
  # 当enable.auto.commit是false的时候ack-mode生效
  #RECORD             每处理一条commit一次
  #BATCH              默认值，每次poll的时候批量提交一次，频率取决于每次poll的调用频率
  #TIME               每次间隔ackTime的时间去commit
  #COUNT              累积达到ackCount次的ack去commit
  #COUNT_TIME         ackTime或ackCount哪个条件先满足，就commit
  #MANUAL             listener负责ack，然后按照BATCH方式处理
  #MANUAL_IMMEDIATE   listener负责ack，每调用一次，就立即commit
  ack-mode: MANUAL
  #ack-count:
  #ack-time:
  # 在侦听器容器运行的线程数量，一般可以按照分区数量设置，加速消费
  concurrency: 2
  # 默认SINGLE，可选项为SINGLE或者BATCH
  # 设置为BATCH时，配合spring.kafka.consumer.max-poll-recrods来使用
  type: SINGLE
  # 轮询消费者时使用的超时（以毫秒为单位），对应kafka参数max.poll.interval.ms，默认是300秒
  # 超时会将此消费者移除，启动重新平衡
  poll-timeout: 300000
spring.kafka.producer:
  # client-id
  # acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
  # acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
  # acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
  # 可以设置的值为：all, -1, 0, 1
  acks: all
  #如果该值大于零时，表示启用重试失败的发送次数
  retries: 1
  #生产者生成的所有数据的压缩类型，此配置接受标准压缩编解码器（'gzip'，'snappy'，'lz4'），
  #它还接受'uncompressed'以及'producer'，分别表示没有压缩以及保留生产者设置的原始压缩编解码器，
  #默认值为producer
  compression-type: producer
  # 每当多个记录被发送到同一分区时，生产者将尝试将记录一起批量处理为更少的请求，
  # 这有助于提升客户端和服务器上的性能，此配置控制默认批量大小（以字节为单位），默认值为16384，16KB
  batch-size: 16384
  # 生产者可用于缓冲等待发送到服务器的记录的内存总字节数，默认值为33554432，32MB
  buffer-memory: 33554432
  key-deserializer: org.apache.kafka.common.serialization.StringSerializer
  value-deserializer: org.apache.kafka.common.serialization.StringSerializer
  # value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer