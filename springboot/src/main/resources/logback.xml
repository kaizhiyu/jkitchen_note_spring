<?xml version="1.0" encoding="UTF-8"?>
<!--
configuration 节点包含下面三个属性
 
scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false
 -->
<configuration debug="false">

	<!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
	<property name="LOG_HOME" value="/data/log" />
	
	<property resource="config.properties" />

	<!-- <property file="src/main/java/chapters/configuration/variables.properties" /> -->

	<!-- 设置日志上下文名称，可以通过%contextName来打印日志上下文名称 -->
	<!-- <contextName>myAppName</contextName>  -->
	<!-- 本例中 只在 appender STDOUT 中使用-->
	<contextName>${log.appname}</contextName> 
	
	<!-- 控制台输出 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
	
		<!-- 可以自定义拦截器 -->
		<!-- <filter class="com.sauzny.jmvc.utils.logback.MyLogbackFilter" /> -->
		
		<!-- 用logback提供的拦截器ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中 -->
		<!-- 
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
              <level>ERROR</level>
        </filter>
         -->
         
         
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS Z} [%thread] %-5level %logger{50} - %msg%n</pattern>
		</encoder>
        <!--  
		<layout class="com.sauzny.jmvc.utils.logback.MyPatternLayout">
			格式化输出：%contextName %d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度  %msg：日志消息，%n是换行符
			<pattern>%contextName %d{yyyy-MM-dd HH:mm:ss.SSS Z} [自定义转换符输出的ip：%ip] [%thread] %-5level %logger{50} - %msg%n</pattern>
		</layout>
		 -->
	</appender>
	


	<!-- 日志输出级别 -->
	<!-- TRACE < DEBUG < INFO < WARN < ERROR -->

	
	<root level="INFO">
		<appender-ref ref="STDOUT" />
	</root>
	
</configuration>